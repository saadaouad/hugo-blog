<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Saad Aouad</title>
    <link>https://saadaouad.net/post/</link>
    <description>Recent content in Posts on Saad Aouad</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 01 Apr 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://saadaouad.net/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Difference between undefined and null in Javascript</title>
      <link>https://saadaouad.net/post/difference-between-undefined-and-null-in-javascript/</link>
      <pubDate>Mon, 01 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://saadaouad.net/post/difference-between-undefined-and-null-in-javascript/</guid>
      <description> In Javascript undefined means a variable that has been declared but doesn&amp;rsquo;t have a value assigned, example:  var myVar; // gives undefined typeof myVar; // gives undefined   null is a primitive assigned value. it can be null, empty or non-existent value, example:  var myVar = null; // gives null typeof myVar; // gives object  </description>
    </item>
    
    <item>
      <title>Handle and inspect errors in GraphQL network stack</title>
      <link>https://saadaouad.net/post/handle-errors-in-graphql/</link>
      <pubDate>Mon, 04 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://saadaouad.net/post/handle-errors-in-graphql/</guid>
      <description>In any application it&amp;rsquo;s important to handle and inspect erros from server and client sides, since this can help a lot to debug and check what happened exactly in your app. Today we will see how we can handle errors in GraphQL especially from client side using react apollo.
When using Apollo Link, the best way to handle errors is to use apollo-link-error to handle Graphql, network and server errors:</description>
    </item>
    
    <item>
      <title>Allowing access to all Disqus resources</title>
      <link>https://saadaouad.net/post/allowing-access-to-all-disqus-resources/</link>
      <pubDate>Mon, 06 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://saadaouad.net/post/allowing-access-to-all-disqus-resources/</guid>
      <description>In this post we will see how we can allowing access to all Disqus resources when you have a Content Security Policy header in your web application.
To have a secured web application, you have to add some HTTP headers with security policies, ref https://content-security-policy.com/.
And if you are using Disqus in your web application, Disqus will not be loaded when your app it&amp;rsquo;s deployed and you should see an error in the console like:</description>
    </item>
    
    <item>
      <title>Upload file using redux-form</title>
      <link>https://saadaouad.net/post/upload-file-using-redux-form/</link>
      <pubDate>Tue, 08 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://saadaouad.net/post/upload-file-using-redux-form/</guid>
      <description>This example demonstrates how i can upload a file and update his value using redux-form.
If you&amp;rsquo;ve setting up redux-form with an input type=&amp;quot;file&amp;quot;, you should have encountered a browser error like the following error on Chrome:
Uncaught DOMException: Failed to set the &#39;value&#39; property on &#39;HTMLInputElement&#39;: This input element accepts a filename, which may only be programmatically set to the empty string.  For a security reasons, input with type=&amp;quot;file&amp;quot; don&amp;rsquo;t support setting the value property programmatically, ref https://developer.</description>
    </item>
    
    <item>
      <title>Reset Redux Store</title>
      <link>https://saadaouad.net/post/reset-redux-store/</link>
      <pubDate>Mon, 26 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://saadaouad.net/post/reset-redux-store/</guid>
      <description>To reset your redux store you should write a root reduce to delegate handling the action to the reducer generated by combineReducers(). Whenever it receives SIGN_OUT_COMPLETE action, it returns the initial state.
We can consider this is your main reducer:
const todoApp = combineReducers({ /* your app’s top-level reducers */ })  You can write a rootReducer delegating to it:
const todoApp = combineReducers({ /* your app’s top-level reducers */ }) const rootReducer = (state, action) =&amp;gt; { return todoApp(state, action) }  Now we just need to inform the rootReducer to return the initial state after SIGN_OUT_COMPLETE action.</description>
    </item>
    
    <item>
      <title>Want to build a successful web app?</title>
      <link>https://saadaouad.net/post/getting-real/</link>
      <pubDate>Sun, 24 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://saadaouad.net/post/getting-real/</guid>
      <description>It’s time to Get Real. Getting Real is a smaller, faster, better way to build software.
Getting real is about skipping all the stuff that represents real (charts, graphs, boxes, arrows, schematics, wireframes, etc.) and actually building the real thing.
Getting real is less. Less mass, less software, less features, less paperwork, less of everything that&amp;rsquo;s not essential (and most of what you think is essential actually isn&amp;rsquo;t).
Getting real is staying small and being agile.</description>
    </item>
    
    <item>
      <title>What is Redux?</title>
      <link>https://saadaouad.net/post/what-is-redux/</link>
      <pubDate>Sun, 05 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://saadaouad.net/post/what-is-redux/</guid>
      <description>Redux is a JavaScript library that aims to manage stateful data. The state of your whole application is stored in a single JS object called store. A single function, the reducer, is responsible for making modifications to the store. We trigger the reducer by dispatching an action, a JS object that describes how our data should change. The reducer function receives the action as an argument and makes changes accordingly. Other parts of the code (usually React Components) can subscribe to data in the store.</description>
    </item>
    
    <item>
      <title>Never stop learning</title>
      <link>https://saadaouad.net/post/never-stop-learning/</link>
      <pubDate>Mon, 02 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://saadaouad.net/post/never-stop-learning/</guid>
      <description>Never stop learning They never show that, they never teach that in school, you get your degree and then you work from 9am to 5pm, you go to the home, No! Every good engineer, i guarantee you they go home, they work, they study, so that when it comes time to learn new things, they know all about it already. And that, to me, is my road to mastery for any sort of technology.</description>
    </item>
    
  </channel>
</rss>