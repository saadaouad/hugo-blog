<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Saad Aouad</title>
    <link>https://saadaouad.net/</link>
    <description>Recent content on Saad Aouad</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 19 May 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://saadaouad.net/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Comparison with the equality (==) and strict equality (===) operator in Javascript</title>
      <link>https://saadaouad.net/post/comparison-with-the-equality-and-strict-equality-operator-in-js/</link>
      <pubDate>Tue, 19 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://saadaouad.net/post/comparison-with-the-equality-and-strict-equality-operator-in-js/</guid>
      <description>If the values being compared are not of the same type, the equality operator will perform a type conversion, and then evaluate the values. however, the strict equality operator will compare both the data type and values as-is, without converting one type to the other. Example:
1 == &amp;quot;1&amp;quot; // returns true, because Javascript performs type conversion from string to number. 1 === &amp;quot;1&amp;quot; // returns false, because the types are different and type conversion is not performed.</description>
    </item>
    
    <item>
      <title>Difference between undefined and null in Javascript</title>
      <link>https://saadaouad.net/post/difference-between-undefined-and-null-in-javascript/</link>
      <pubDate>Mon, 01 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://saadaouad.net/post/difference-between-undefined-and-null-in-javascript/</guid>
      <description> In Javascript undefined means a variable that has been declared but doesn&amp;rsquo;t have a value assigned, example:  var myVar; // gives undefined typeof myVar; // gives undefined   null is a primitive assigned value. it can be null, empty or non-existent value, example:  var myVar = null; // gives null typeof myVar; // gives object  </description>
    </item>
    
    <item>
      <title>Handle GraphQL errors with Apollo Client</title>
      <link>https://saadaouad.net/post/handle-graphql-errors-with-apollo-client/</link>
      <pubDate>Mon, 04 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://saadaouad.net/post/handle-graphql-errors-with-apollo-client/</guid>
      <description>In any application it&amp;rsquo;s important to handle and inspect erros since this helps a lot to debug and check what happened exactly in your application. Today we will see how to handle GraphQL errors with Apollo Client.
When using Apollo Link, the ability to handle network errors is way more powerful. The best way to do this is to use the apollo-link-error to catch and handle server, network and GraphQL errors.</description>
    </item>
    
    <item>
      <title>Upload file using redux-form</title>
      <link>https://saadaouad.net/post/upload-file-using-redux-form/</link>
      <pubDate>Tue, 08 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://saadaouad.net/post/upload-file-using-redux-form/</guid>
      <description>In this example we will explain how to upload a file using redux-form.
If you&amp;rsquo;ve setting up redux-form with an input type=&amp;quot;file&amp;quot;, you should have encountered with an error like this:
Uncaught DOMException: Failed to set the &#39;value&#39; property on &#39;HTMLInputElement&#39;: This input element accepts a filename, which may only be programmatically set to the empty string.  For a security reasons, input with type=&amp;quot;file&amp;quot; don&amp;rsquo;t support setting the value property programmatically, ref https://developer.</description>
    </item>
    
    <item>
      <title>Reset Redux Store</title>
      <link>https://saadaouad.net/post/reset-redux-store/</link>
      <pubDate>Mon, 26 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://saadaouad.net/post/reset-redux-store/</guid>
      <description>To reset your redux store you should write a root reduce to delegate handling the action to the reducer generated by combineReducers(). Whenever it receives SIGN_OUT_COMPLETE action, it returns the initial state.
We can consider this is your main reducer:
const todoApp = combineReducers({ /* your app’s top-level reducers */ })  You can write a rootReducer delegating to it:
const todoApp = combineReducers({ /* your app’s top-level reducers */ }) const rootReducer = (state, action) =&amp;gt; { return todoApp(state, action) }  Now we just need to inform the rootReducer to return the initial state after SIGN_OUT_COMPLETE action.</description>
    </item>
    
    <item>
      <title>Want to build a successful web app?</title>
      <link>https://saadaouad.net/post/getting-real/</link>
      <pubDate>Sun, 24 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://saadaouad.net/post/getting-real/</guid>
      <description>It’s time to Get Real. Getting Real is a smaller, faster, better way to build software.
Getting real is about skipping all the stuff that represents real (charts, graphs, boxes, arrows, schematics, wireframes, etc.) and actually building the real thing.
Getting real is less. Less mass, less software, less features, less paperwork, less of everything that&amp;rsquo;s not essential (and most of what you think is essential actually isn&amp;rsquo;t).
Getting real is staying small and being agile.</description>
    </item>
    
    <item>
      <title>What is Redux?</title>
      <link>https://saadaouad.net/post/what-is-redux/</link>
      <pubDate>Sun, 05 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://saadaouad.net/post/what-is-redux/</guid>
      <description>Redux is a JavaScript library that aims to manage stateful data. The state of your whole application is stored in a single JS object called store. A single function, the reducer, is responsible for making modifications to the store. We trigger the reducer by dispatching an action, a JS object that describes how our data should change. The reducer function receives the action as an argument and makes changes accordingly. Other parts of the code (usually React Components) can subscribe to data in the store.</description>
    </item>
    
  </channel>
</rss>